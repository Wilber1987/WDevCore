{
	"WObject": {
		"prefix": ["wobj", "WObject"],
		"body": ["{ tagName:'div', class: 'className', children:[]}"],
		"description": "Objeto para WREnder."
	},
	"WInput": {
		"prefix": ["winp", "winput"],
		"body": ["{ tagName:'input',  type:'text', className: 'className'"],
		"description": "Objeto para WREnder."
	},"WHeader": {
		"prefix": ["wh", "WHeader"],
		"body": ["{ tagName:'h1',  innerText: 'header'}"],
		"description": "Objeto para WREnder."
	},"WLink": {
		"prefix": ["wlink", "WLink"],
		"body": ["{ tagName:'a',  innerText: 'header', href: '#'}"],
		"description": "Objeto para WREnder."
	},"WImg": {
		"prefix": ["wimg", "Wimg"],
		"body": ["{ tagName:'img',  src: 'imgUrl', class: 'className'}"],
		"description": "Objeto para WREnder."
	},"WImgBtn": {
		"prefix": ["wimgbtn", "WimgBtn"],
		"body": ["{ tagName:'img',  src: 'imgUrl', class: 'className',onclick: async ()=>{",
			"\t//code.....","}}"],
		"description": "Objeto para WREnder."
	},
	"WBTN": {
		"prefix": ["wbtn", "wbtn"],
		"body": ["{ tagName:'input',  type:'button', className: 'className', value: 'Ok', onclick: async ()=>{",
			"\t//code.....","}}"],
		"description": "Objeto para WREnder."
	},"WSelect": {
		"prefix": ["wsel", "wselect"],
		"body": ["{ tagName:'select', class: 'className', children:[",
			"\t{tagName:'option', innerText:'Select Option', value: 'Select Option'}}",
			"]}"],
		"description": "Objeto para WREnder."
	},"WStyle": {
		"prefix": ["wsty", "wstyle"],
		"body": ["{ tagName:'w-style, ClassList: [",
			"\tnew WCssClass(`selector`, {",
			"\t\tcssprop: 'css value',",
			"\t}),",
			"]}"],
		"description": "Objeto para WREnder."
	},"WStyleFull": {
		"prefix": ["wstyfull", "wstylefull"],
		"body": ["new WStyledRender({ ClassList: [",
			"\t\tnew WCssClass( `selector`, {",
			"\t\t\tprop: 'value',",
			"\t\t}),",
			"\t], MediaQuery: [ {condicion: '(max-width: 600px)',",
			"\t\tClassList: []},",
			"\t]",
			"});"],
		"description": "Objeto para WREnder."
	},"WStyleClass": {
		"prefix": ["wstyclass", "wstyleClass"],
		"body": [
			"new WCssClass( `selector`, {",
			"\tprop: 'value',",
			"}),"
			],
		"description": "Objeto para WREnder."
	}, "WWebComponent": {
		"prefix": ["wcomp", "wcomponent"],
		"body": [
			"import { css } from \"./WDevCore/WModules/WStyledRender.js\";",
			"",
			"class Component  extends HTMLElement {",
			"    constructor() { ",
			"        super(); ",
			"        this.append(this.CustomStyle); ",
			"        this.Draw();",
			"    }",
			"    connectedCallback() {  }",
			"    Draw = async () => {  }",
			"    ",
			"    update() {",
			"        this.Draw();",
			"     }",
			"     CustomStyle = css`",
			"         .component{",
			"            display: block;",
			"         }           ",
			"     `",
			"}",
			"customElements.define('w-component', Component);",
			"export { Component }"
			],
		"description": "Objeto para WREnder."
	}, "WWebComponentShadow": {
		"prefix": ["wcompShadow", "wcomponentShadow"],
		"body": [
			"import { css } from \"./WDevCore/WModules/WStyledRender.js\";",
			"",
			"class Component  extends HTMLElement {",
			"    constructor() { ",
			"        super(); ",
			"        this.attachShadow({ mode: 'open' }); ",
			"        this.shadowRoot?.append(this.CustomStyle); ",
			"        this.Draw();",
			"    }",
			"    connectedCallback() {  }",
			"    Draw = async () => {  }",
			"    ",
			"    update() {",
			"        this.Draw();",
			"     }",
			"     CustomStyle = css`",
			"         .component{",
			"            display: block;",
			"         }           ",
			"     `",
			"}",
			"customElements.define('w-component', Component);",
			"export { Component }"
			],
		"description": "Objeto para WREnder."
	}, "WImports": {
		"prefix": ["wimports", "WImports"],
		"body": [
			"import { WRender, WArrayF, ComponentsManager, WAjaxTools } from '../WModules/WComponentsTools.js';",
			"import { WCssClass } from '../WModules/WStyledRender.js';"			
			],
		"description": "Objeto para WREnder."
	}, "WTableBasic": {
		"prefix": ["WTableBasic", "WTableBasic"],
		"body": [
			"new WTableComponent({",
                "\tDataset: dataTestFact,",
                "\tDisplayData: ['prop', 'prop', 'prop', 'prop', 'prop'],",
                "\tOptions: {",
                    "\t\tSearch: true,  UrlSearch: 'api_route',",
                    "\t\tAdd: true, UrlAdd: 'api_route',", 
                    "\t\tUserActions: [{ name: 'Log...', action: (TableElement) => { console.log(TableElement); } }]",
                "\t}",
            "})"			
			],
		"description": "Objeto para WREnder."
	}, "WTableBasicFull": {
		"prefix": ["WTableBasicFull", "WTableBasicFull"],
		"body": [
			"new WTableComponent({",
                "\tDataset: dataTestFact,",
                "\tDisplayData: ['prop', 'prop', 'prop', 'prop', 'prop'],",
                "\tmaxElementByPage: 5,",
                "\tpaginate: true,",
                "\tModelObject: {'prop':'', 'prop':'', 'prop':'', 'prop':'', 'prop':''},",
                "\tOptions: {",
                    "\t\tSearch: true,  UrlSearch: 'api_route',",
                    "\t\tAdd: true, UrlAdd: 'api_route',",
                    "\t\tEdit: true, UrlUpdate: 'api_route',",
                    "\t\tDelete: true, UrlDelete: 'api_route',",
                    "\t\tShow: true, ",
                    "\t\tSelect: true,",
                    "\t\tUserActions: [{ name: 'Log...', action: (TableElement) => { console.log(TableElement); } }]",
                "\t}",
            "})"			
			],
		"description": "Objeto para WREnder."
	}, "WViewComponent": {
		"prefix": ["WViewComponent", "wviewcomponent"] ,
		"body": [
		  "//@ts-check",
		  "import { WRender, ComponentsManager, WAjaxTools, WArrayF } from \"./WDevCore/WModules/WComponentsTools.js\";",
		  "import { StylesControlsV2, StylesControlsV3, StyleScrolls } from \"./WDevCore/StyleModules/WStyleComponents.js\"",
		  "import { css } from \"./WDevCore/WModules/WStyledRender.js\";",
		  "/**",
		  " * @typedef {Object} ComponentConfig",
		  " * * @property {Object} [propierty]",
		  " */",
		  "class ComponentView extends HTMLElement {",
		  "    /**",
		  "     * ",
		  "     * @param {ComponentConfig} props ",
		  "     */",
		  "    constructor(props) {",
		  "        super();",
		  "        this.attachShadow({ mode: 'open' });     ",
		  "        this.OptionContainer = WRender.Create({ className: \"OptionContainer\" });",
		  "        this.TabContainer = WRender.Create({ className: \"TabContainer\", id: 'TabContainer' });",
		  "        this.Manager = new ComponentsManager({ MainContainer: this.TabContainer, SPAManage: false });        ",
		  "        this.shadowRoot?.append(this.CustomStyle);        ",
		  "        this.shadowRoot?.append(",
		  "            StylesControlsV2.cloneNode(true),",
		  "            StyleScrolls.cloneNode(true),",
		  "            StylesControlsV3.cloneNode(true),",
		  "            this.OptionContainer,",
		  "            this.TabContainer",
		  "        );",
		  "        this.Draw();",
		  "    }",
		  "    Draw = async () => {",
		  "        this.SetOption();",
		  "    }",
		  "  ",
		  "",
		  "    SetOption() {",
		  "        this.OptionContainer.append(WRender.Create({",
		  "            tagName: 'button', className: 'Block-Primary', innerText: 'Datos contrato',",
		  "            onclick: async () => this.Manager.NavigateFunction(\"id\", component ??  WRender.Create({ className: \"component\"}))",
		  "        }))        ",
		  "    }",
		  "   ",
		  "    CustomStyle = css`",
		  "        .component{",
		  "           display: block;",
		  "        }           ",
		  "    `",
		  "}",
		  "customElements.define('w-component', ComponentView);",
		  "export { ComponentView }"
		],
		"description": "WViewComponent"
	  }, "WCrudComponent": {
		"prefix": ["WCrudComponent", "wcrudcomponent"],
		"body": [
			"//@ts-check",
			"import { StylesControlsV2, StyleScrolls } from \"../../../WDevCore/StyleModules/WStyleComponents.js\";",
			"import { WTableComponent } from \"../../../WDevCore/WComponents/WTableComponent.js\";",
			"import { WFilterOptions } from \"../../../WDevCore/WComponents/WFilterControls.js\";",
			"import { css } from \"../../../WDevCore/WModules/WStyledRender.js\";",
			"import { Tests } from \"../../Model/QuestionnairesDataBaseModel.js\";",
			"import { WRender } from \"../../../WDevCore/WModules/WComponentsTools.js\";",
			"",
			"/**",
			" * @typedef {Object} ComponentConfig",
			" * * @property {Object} [propierty]",
			" */",
			"class ComponentManager extends HTMLElement {",
			"    /**",
			"    * @param {ComponentConfig} props",
			"    */",
			"    constructor(props) {",
			"        super();",
			"        this.Draw();",
			"    }",
			"    Draw = async () => {",
			"        /**@type {EntityClass} */",
			"        this.ModelComponent = new EntityClass();",
			"        /**@type {Tests} */",
			"        this.EntityModel = new EntityClass();",
			"        /**@type {Array} */",
			"        this.Dataset = await this.EntityModel.Get();",
			"        this.TabContainer = WRender.Create({ class: 'TabContainer' });",
			"        this.MainComponent = new WTableComponent({",
			"            ModelObject: this.ModelComponent,",
			"            EntityModel: this.EntityModel,",
			"            AutoSave: true,",
			"            Dataset: this.Dataset, Options: {",
			"                Add: true,",
			"                Edit: true,",
			"                Search: true,",
			"                //UserActions: [{ name: \"action\", action: (entity) => {/*action*/ }}]",
			"            }",
			"        });",
			"        this.FilterOptions = new WFilterOptions({",
			"            Dataset: this.Dataset,",
			"            ModelObject: this.ModelComponent,",
			"            FilterFunction: (/** @type {Array | undefined} */ DFilt) => {",
			"                this.MainComponent?.DrawTable(DFilt);",
			"            }",
			"        });",
			"        this.TabContainer.append(this.MainComponent);",
			"        this.append(",
			"            StylesControlsV2.cloneNode(true),",
			"            StyleScrolls.cloneNode(true),",
			"            this.CustomStyle,",
			"            this.FilterOptions,",
			"            this.TabContainer",
			"        );",
			"    };",
			"    update = async () => {",
			"        /**@type {Array|undefined} */",
			"        const response = await this.EntityModel?.Get();",
			"        this.MainComponent?.DrawTable(response);",
			"    };",
			"    CustomStyle = css`",
			"         .component{",
			"            display: block;",
			"         }           ",
			"     `;",
			"}",
			"customElements.define('w-component-manager', ComponentManager);",
			"export { ComponentManager };",
			"",
			"window.onload = ()=>{",
			"    // @ts-ignore",
			"    Main.append(new ComponentManager({}));",
			"}"
		],
		"description": "crea un componente con caracteristicas crud"
	  }
}